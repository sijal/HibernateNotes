What are id generators what is the purpose of it?
id generators are the classes provided by the Hibernate Framework to generate primary key column value for the surrogate key columns of the entity classes during the time of performing the save(entity) operation.
  
There are 11 id generators are provided by Hibernate to address different requirements of generating the id.
1. assigned = dont generate user will assign
2. increment = increment the last generated id value by 1 and return
3. identity = supports fetching the id back for the databases that supports identity or auto increment
4. sequence = oracle database to generate id from the sequence in inserting the entity class

<class name="outlet" table="outlet">
  <id name="outletNo" column="outlet_no">
    <generator class="sequence"/>
  </id>
</class>

the default sequence "hibernate_unique_key" will be created and will be used for generating id. 
So if we configure multiple entity classes with sequence id generator without specifying the sequence name, then all the entity classes uses the same sequence to generate the id and we will loose sequence order of ids in their tables.
  
Instead create a sequence in oracle database and specify its name as an param for each table/entity class.
  
<id name="outletNo" column="outlet_no">
  <generator class="sequence">
    <param name="sequence">outlet_no_sequence</param>
  </generator>
</id>
  
How does sequence id generator works?
while inserting the data, session object calls sequence id generator to fetch nextval from the sequence and return to use it. So that sequence id generator executes
"select sequence.nextval from dual query" on database fetches the sequence value and returns the session object.
    
11. native = while working with identity or sequence, since these are databases specific id generators while switching from one database to other we need to modify the id generator names across the mapping files.
instead a native automatically identifies the underlying database type and works either as a identity generator or sequence generator, so no need to modifying the mapping file.
  
5. hilo
6. seq_hilo


7. guid = global unique id, there are few databases like oracle supports in generating an 64 bit long random hex decimal number which is unique within the world. no 2 guid matches with each other. So if we want our id to be unique globally and should be human readable format we need to use guid.
it supports datatype of varchar 

select sys_guid() from dual; 
sys_guid() is a function in oracle database  
    
8. uuid = uuid universal unique id is also an 64/bit long random hexa decimal number that will be generated by the hibernate id generator without the support of database. This works across all the databases.
Supported Types: varchar  
  
9. foreign = direct one-to-one relationship the primary key of the parent table acts as an primary key and foreign key in child table, in such case to generate the foreign key from the primary key of the parent table we use foregin id generator.

10. select
in legacy applications where there are no id generators supported, people use to rely on database capabilities in generating the ids.
  (or)
to avoid round trips in generating the id between java and database also people use to dependent on datbaase capabilities.
  
How does it works?
after completing the save(entity) operation, the select id generators triggers a query on the database to fetch the primary key value with which object has been persisted based on the cadidate key value specified to it.
  
Developers use to write database triggers that would trigger automatically before insert operation which generates id using which the insert operation used to be performed.

pl/sql = we can write code in database  (programming language sql databases)
trigger := is a program / snippet of code in database that will be executed automatically by the database.
we should bind the trigger to a table and specify an action/operation on the table for which it should be called. We can tell database to call the trigger before/after operation

the triggers are of 2 types  
1. table level trigger = if we insert 5 records in a transaction, the trigger will be called one per operation.  
2. row level trigger = for each row the trigger will be executed.
  

create or replace trigger outlet_trigger 
before insert on outlet
for each row
begin
  :NEW.outlet_no:=sys_uid();
end

Now from the above we can understand database itself will generate the id through the help of triggers, then how do we know the current entity object we persistented has been stored with which id?
select id generator can be used in these cases.
  
outlet (table)
outlet_no (pk)
outlet_nm (unique) (not null) (candidate/secondary key)
description
agent_nm
contact_no
capacity

<id name="outletNo" column="outlet_no">
  <generator class="select">
    <param name="name">outlet_nm</param>
  </generator>
</id>


Outlet outlet = new Outlet();
outlet.setOutletName("Lakshmi Stores");
outlet.setCapacity(10);
outlet.setDescription("Near SR Nagar junction");
outlet.setAgentName("Williams");
outlet.setContactNo("938389434");

session.save(outlet);

select outlet_no from outlet where outlet_nm = "Lakshmi Stores";













  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
  
  
  
  
  
  
  
  
  
  