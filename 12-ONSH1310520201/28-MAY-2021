What are id generators?
id generators are the classes provided by the Hibernate Framework, in helping to generate a unique number to used as primary key value while storing the data into database table.

we key column we have choosen here is not a nutural column, rather we have taken an surrogate key column which dont have any relationship with business, so end-user dont know what makes it unique to supply the value. So, System should be able to generate the key value during the time of storing the data.
  
If hibernate framework has not provided the id generator, then programmers has to write complex logic in computing the id value uniquely while storing the data, so to avoid writing the boiler-plate logic hibernate has provided id generators.
  
We need to configure which id generator we want to use for generating the id value for an entity class, so that hibernate would invoke the id generator class and grab the value with which it performs the operation.
  
1. assigned
2. increment
3. identity
4. sequence
5. native  
6. hilo      (deprecated)
7. seq_hilo  (deprecated)
8. guid
9. uid
10. select
11. foreign (while working with relationships)

1. assigned = no id generator, user will supply the id value manually. default id generator.
  
2. increment
it queries the max primary key column value of the database table and always increments by one and returns as the id value.
  
<id name="categoryNo" column="category_no">
  <generator class="increment"/>
</id>

How does id generators are instantiated and maintained?
During the time of instantiating the SessionFactory object, SessionFactory after reading the configuration and mapping information, will identifies for each entity class within it mapping what is the configured id generator and instantiate the id generator objects and associate them to the entity class and holds the references withit.
  
When we ask Session, class to save() the data it goes to the SessionFactory grabs the pre-instantiated id generator for that entity class and uses the object for generating the id.

How does increment id generator works?  
session.save(category1);
when we call session.save(category1); the session object goes to increment id generator object which was already pre-instantiated and ask him to generate the id. Now increment id generator goes to the database table fetches the max(id) value of the table pk, and store within the instance value of the class, increments the instance value and returns to us. 
The consecutive call for generating the id to increment id generator will not goes to the database, rather the in-memory instance value will be increment and will be returned. In this way increment id generator optimizes the performance in generating the id value.
  
Supported DataTypes:-
  int, long, short
Environment:-
  Standalone, Multi-Threaded. But doesnt work on Cluster Environment.

Post completion of save() method behaviour?
--------------------------------------------
The Session object after performing the save() operating by generating the id through id generator, will updates the id value within the Entity object attribute and returns the updated object as a return value, so that programmer within the application always can find what the id with which object is been persisted into the database.
  
Object obj = session.save(category);
((Category)obj).getCategoryNo(); = will returns the id with which the object is persisted in database.

3. identity
There are databases like mysql and ms-sql server which supports auto increment and identity columns respectively, the primary key column value for that table while inserting the data will be generated by database itself during the operation.
  
identity generator will not generate the id, because database itself takes care of generating the id if we mark the columns as autoincrement or identity column. After performing the insert operation, identity generator goes to the database table and fetches the id value with which the current object record has been stored and will returns to the Session object.
  
Supported datatype:
int, long, short

Environment:-
  databases that supports identity or auto increment columns only. 

4. sequence
sequence id generators works for the database oracle which doesnt support identity or auto increment column.
  
Each table to generate primary key column value create a sequence in oracle
while inserting the data fetch the next_val from the sequence and use it for performing insert operation.
  
sequence:- 
create or replace sequence category_no_seq start with 1 increment by 1 max value 999999;
select category_no_seq.next_val from dual;
select category_no_seq.currval from dual;

insert into category("category_no","category_nm","description") values(category_no_seq.next_val, 'Fashion', 'faction and style');

sequence id generator when we configure for an entity class, will fetch the seq.nextval by querying the sequence from the database and passes to the session object to use it for performing insert operation.
  
if there is no sequence name configured to sequence id generator, by default it creates a sequence in the database with name "hibernate_sequence" and uses the same sequence to generate the id for all the entity classes which has configured the sequence generator.
  
<class name="Category" table="category">
  <id name="categoryNo" column="category_no">
    <generator class="sequence"/>
  </id>
</class>

<class name="Outlet" table="outlet">
  <id name="outletNo" column="outlet_no">
    <generator class="sequence"/>
  </id>
</class>  
here the hibernate creates 2 sequence id generator object each per the entity class, but goes and queries the nextval from the default sequence "hibernate_sequence" in oracle database. the problem here is the id for both tables will not be sequential.

it is recommended to manually create one sequence per table and pass the sequence name as an input to sequence id generator as shown below.
  
  
<class name="Category" table="category">
  <id name="categoryNo" column="category_no">
    <generator class="sequence">
      <param name="sequence">category_no_seq</param>
    </generator>    
  </id>
</class>

<class name="Outlet" table="outlet">
  <id name="outletNo" column="outlet_no">
    <generator class="sequence">
      <param name="seqeunce">outlet_no_seq</param>
    </generator>
  </id>
</class>  

#5 native
while working with mysql server or ms-sql server we use identity generator, but when we switch oracle database we need to use sequence id generator. each time when we switch from one database to other we need modify the mapping information for entity class. 
  
Instead use native generator that works both like identity and sequence depends on the underlying database on which we are running the application  
  
mysql server = auto increment  |-- identity
ms sql server = identity       |
  
oracle database = sequence     |- sequence

#40 entity classes = for all we use identity generator
<class name="bike" table="bike">
  <id name="bikeNo" column="bike_no">
    <generator class="native">
      <param name="sequence">bike_no_seq</param>
    </generator>
  </id>
</class>

6. guid
guid stands for global unique id, where there are few databases that supports generating guid which is a unique random 64 bit string that is unique within the world.

select sys_guid() from dual;  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  