There are 2 types of tools in hibernate
1. command-line tools
  1.1 SchemaExport = to create/drop tables from mapping
  1.2 SchemaUpdate = update the existing database from the mapping
  1.3 SchemaValidate = validate mapping information provided against the underlying schema

These 3 tools are 3 java classes with main() methods within hibernate libraries, so inorder run these tools we need build classpath pointing to all the libraries of our project and run those java classes.
  
hibtool
|-src
  |-main
    |-java
      |-Staff.java
      |-Staff.hbm.xml
    |-resources
      |-hibernate.cfg.xml
|-pom.xml
|-target
  |-classes
|-env.bat

env.bat = set environment variable pointing to all the maven dependencies we are using in our project
set M2_REPO=%USER%\.m2\repository
set HCP=%M2_REPO%\org\hibernate\hibernate-core\5.4.30.Final\hibernate-core-5.4.30.Final.jar;%M2_REPO%\org\jboss\logging\jboss-logging\3.4.1.Final\jboss-logging-3.4.1.Final.jar;%M2_REPO%\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;%M2_REPO%\org\javassist\javassist\3.27.0-GA\javassist-3.27.0-GA.jar;%M2_REPO%\net\bytebuddy\byte-buddy\1.10.21\byte-buddy-1.10.21.jar;%M2_REPO%\antlr\antlr\2.7.7\antlr-2.7.7.jar;%M2_REPO%\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;%M2_REPO%\org\jboss\jandex\2.2.3.Final\jandex-2.2.3.Final.jar;%M2_REPO%\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;%M2_REPO%\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;%M2_REPO%\org\dom4j\dom4j\2.1.3\dom4j-2.1.3.jar;%M2_REPO%\org\hibernate\common\hibernate-commons-annotations\5.1.2.Final\hibernate-commons-annotations-5.1.2.Final.jar;%M2_REPO%\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;%M2_REPO%\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;%M2_REPO%\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;%M2_REPO%\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;%M2_REPO%\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;%M2_REPO%\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;%M2_REPO%\mysql\mysql-connector-java\8.0.23\mysql-connector-java-8.0.23.jar;%M2_REPO%\com\google\protobuf\protobuf-java\3.11.4\protobuf-java-3.11.4.jar;%M2_REPO%\org\projectlombok\lombok\1.18.20\lombok-1.18.20.jar;target\classes

org.hibernate.tool.hbm2ddl.SchemaExport
  --quite = dont display debug information while running tool
  --drop  = drop tables
  --create = create tables
  --text = dont export the sql scripts on database just print on the console
  --output=filename = writes the generated sql queries onto a file
  --config=hibernate.cfg.xml = pass cfg.xml
  --properties=hibernate.properties = pass props
  --format = format generated sql queries
  --delimeter=; = between sql queries add the ; as a separator
  
java -cp %HCP% org.hibernate.tool.hbm2ddl.SchemaExport --create --config=hibernate.cfg.xml
java -cp %HCP% org.hibernate.tool.hbm2ddl.SchemaExport --drop --config=hibernate.cfg.xml

java -cp %HCP% org.hibernate.tool.hbm2ddl.SchemaExport --text --create --config=hibernate.cfg.xml
java -cp %HCP% org.hibernate.tool.hbm2ddl.SchemaExport --output=db.sql --create --config=hibernate.cfg.xml

Instead of running these tools manually by us, we can configure a property in hibernate.cfg.xml asking SessionFactory to run this tool during the time of starting the project

hibernate.hbm2ddl.auto
  |-create-drop = creates the table during the startup of the project and drops at the time of terminating the project (unittesting)
  |-create = drop existing tables during startup and create them
  |-update = update existing tables, if table doesnt exists always creates new
  |-validate = validate the mapping against schema
  























